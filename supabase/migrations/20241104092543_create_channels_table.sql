create table "public"."channels" (
    "id" bigint generated by default as identity not null,
    "channel" text not null,
    "user_id" uuid not null default gen_random_uuid()
);


alter table "public"."channels" enable row level security;

CREATE UNIQUE INDEX channels_channel_key ON public.channels USING btree (channel);

CREATE UNIQUE INDEX channels_pkey ON public.channels USING btree (id);

alter table "public"."channels" add constraint "channels_pkey" PRIMARY KEY using index "channels_pkey";

alter table "public"."channels" add constraint "channels_channel_key" UNIQUE using index "channels_channel_key";

alter table "public"."channels" add constraint "channels_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."channels" validate constraint "channels_user_id_fkey";

grant delete on table "public"."channels" to "anon";

grant insert on table "public"."channels" to "anon";

grant references on table "public"."channels" to "anon";

grant select on table "public"."channels" to "anon";

grant trigger on table "public"."channels" to "anon";

grant truncate on table "public"."channels" to "anon";

grant update on table "public"."channels" to "anon";

grant delete on table "public"."channels" to "authenticated";

grant insert on table "public"."channels" to "authenticated";

grant references on table "public"."channels" to "authenticated";

grant select on table "public"."channels" to "authenticated";

grant trigger on table "public"."channels" to "authenticated";

grant truncate on table "public"."channels" to "authenticated";

grant update on table "public"."channels" to "authenticated";

grant delete on table "public"."channels" to "service_role";

grant insert on table "public"."channels" to "service_role";

grant references on table "public"."channels" to "service_role";

grant select on table "public"."channels" to "service_role";

grant trigger on table "public"."channels" to "service_role";

grant truncate on table "public"."channels" to "service_role";

grant update on table "public"."channels" to "service_role";

create policy "Enable insert for users based on user_id"
on "public"."channels"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));




