CREATE TABLE "public"."channels" (
  "id" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "channel" text NOT NULL,
  "user_id" UUID NOT NULL DEFAULT gen_random_uuid ()
);

ALTER TABLE "public"."channels" enable ROW level security;

CREATE UNIQUE INDEX channels_channel_key ON public.channels USING btree (channel);

CREATE UNIQUE INDEX channels_pkey ON public.channels USING btree (id);

ALTER TABLE "public"."channels"
ADD CONSTRAINT "channels_pkey" PRIMARY KEY USING index "channels_pkey";

ALTER TABLE "public"."channels"
ADD CONSTRAINT "channels_channel_key" UNIQUE USING index "channels_channel_key";

ALTER TABLE "public"."channels"
ADD CONSTRAINT "channels_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users (id) NOT valid;

ALTER TABLE "public"."channels" validate CONSTRAINT "channels_user_id_fkey";

GRANT delete ON TABLE "public"."channels" TO "anon";

GRANT insert ON TABLE "public"."channels" TO "anon";

GRANT REFERENCES ON TABLE "public"."channels" TO "anon";

GRANT
SELECT
  ON TABLE "public"."channels" TO "anon";

GRANT trigger ON TABLE "public"."channels" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."channels" TO "anon";

GRANT
UPDATE ON TABLE "public"."channels" TO "anon";

GRANT delete ON TABLE "public"."channels" TO "authenticated";

GRANT insert ON TABLE "public"."channels" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."channels" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."channels" TO "authenticated";

GRANT trigger ON TABLE "public"."channels" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."channels" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."channels" TO "authenticated";

GRANT delete ON TABLE "public"."channels" TO "service_role";

GRANT insert ON TABLE "public"."channels" TO "service_role";

GRANT REFERENCES ON TABLE "public"."channels" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."channels" TO "service_role";

GRANT trigger ON TABLE "public"."channels" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."channels" TO "service_role";

GRANT
UPDATE ON TABLE "public"."channels" TO "service_role";

CREATE POLICY "Enable insert for users based on user_id" ON "public"."channels" AS permissive FOR insert TO public
WITH
  CHECK (
    (
      (
        SELECT
          auth.uid () AS uid
      ) = user_id
    )
  );

CREATE POLICY "Enable read access for all users" ON "public"."channels" AS permissive FOR
SELECT
  TO public USING (TRUE);
